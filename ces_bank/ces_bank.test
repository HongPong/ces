<?php
/**
 * @file
 * Tests the functionality bank module.
 */

/**
 * Implements DrupalWebTestCase.
 */
class BankTestCase extends DrupalWebTestCase {
  /**
   * @var user
   * The global administrator.
   */
  protected $globalAdminUser;
  /**
   * @var exchange
   * First exchange properties.
   */
  protected $exchange1;
  /**
   * @var exchange
   * Second exchange propeties.
   */
  protected $exchange2;
  /**
   * @var $admin1
   * Administrator user for exchange 1.
   */
  protected $admin1;
  /**
   * @var $account11;
   * First account from exchange 1.
   */
  protected $account11;
  /**
   * @var $account12
   * Second account from exchange 1.
   */
  protected $account12;
  /**
   * @var $admin2
   * Administrator user for exchange 2.
   */
  protected $admin2;
  /**
   * @var $account21;
   * First account from exchange 2.
   */
  protected $account21;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'ces',
      'description' => 'Test CES main features.',
      'group' => 'CES',
    );
  }
  /**
   * Setup CES modules, creates the admin user, configures blocks and user
   * preferences.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(array(
      'ces_bank',
      'ces_blog',
      'ces_notify',
      'ces_offerswants',
      'ces_summaryblock',
      'ces_user')
    );
    $bank = new Bank();
    // Create global bank administrator.
    $this->globalAdminUser = $this->drupalCreateUser(array(
      'administer blocks',
      'access administration pages',
      'administer users',
    ));
    $this->drupalLogin($this->globalAdminUser);
    // Setup blocks.
    $edit = array();
    $edit['blocks[ces_user_ces_user_links][region]'] = 'footer';
    $edit['blocks[ces_user_ces_user_register][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    // Setup users.
    $edit = array();
    $edit['user_email_verification'] = FALSE;
    $this->drupalPost('admin/config/people/accounts', $edit, t('Save configuration'));
    $permission = array(
      'permission' => Permission::PERMISSION_ADMIN,
      'object' => 'global',
      'objectid' => 0,
      'scope' => 'user',
      'scopeid' => $this->globalAdminUser->uid,
    );
    $bank->createPermission($permission);
    $this->drupalLogout();
  }
  /**
   * This function performs all tests.
   *
   * Since we have to perform heavy operations (create and activate exchanges,
   * accounts, etc) before we can actually test critical features we join all in
   * one test function to save resources.
   */
  protected function testAll() {
    $this->createExchanges();
    $this->createAccounts();
    $this->doTransactions();
  }
  /**
   * Creates two exchanges.
   */
  protected function createExchanges() {
    // Create first exchange.
    $this->admin1 = (object) array(
      'name' => 'adminhora',
      'mail' => 'test.adminhora@integralces.net',
      'pass_raw' => 'integralces',
      'firstname' => 'Admin',
      'surname' => 'Hora',
      'address' => 'Major square',
      'town' => 'Manresa',
      'postcode' => '08241',
      'phonemobile' => '7777777',
      'phonework' => '88888888',
      'phonehome' => '99999999',
      'website' => 'http://www.integralces.net',
    );
    $this->exchange1 = array(
      'code' => 'HORA',
      'shortname' => 'EX Bages',
      'fullname' => 'A bona hora - Ecoxarxa del Bages',
      'website' => 'http://abonahora.wordpress.com',
      'country' => 'ES',
      'region' => 'Bages',
      'town' => 'Manresa',
      'map' => 'http://maps.google.com/?ll=41.723796,1.832142&spn=0.083663,0.145912&hnear=Manresa,+Province+of+Barcelona,+Catalonia,+Spain&t=m&z',
      'currencysymbol' => 'ℏ',
      'currencyname' => 'hora',
      'currenciesname' => 'hores',
      'currencyvalue' => '1.0',
      'currencyscale' => '2',
      'registration_offers' => '1',
      'registration_wants' => '1',
    );
    $this->createExchange(array_merge($this->exchange1, $this->accountRecord((array) $this->admin1)));
    $this->activateExchange($this->exchange1);
    // Create second exchange.
    $this->admin2 = (object) array(
      'name' => 'adminbcna',
      'mail' => 'test.adminbcna@integralces.net',
      'pass_raw' => 'integralces',
      'firstname' => 'Admin',
      'surname' => 'Barcelona',
      'address' => 'Catalunya square',
      'town' => 'Barcelona',
      'postcode' => '08000',
      'phonemobile' => '11111111',
      'phonework' => '22222222',
      'phonehome' => '33333333',
      'website' => 'http://www.integralces.net',
    );
    $this->exchange2 = array(
      'code' => 'BCNA',
      'shortname' => 'EX Barna',
      'fullname' => 'Ecoxarxa de Barcelona',
      'website' => 'http://cooperativa.ecoxarxes.cat',
      'country' => 'ES',
      'region' => 'Barcelonès',
      'town' => 'Barcelona',
      'map' => 'http://maps.google.com/barcelona',
      'currencysymbol' => 'ECO',
      'currencyname' => 'eco',
      'currenciesname' => 'ecos',
      'currencyvalue' => '0.1',
      'currencyscale' => '2',
      'registration_offers' => '0',
      'registration_wants' => '0',
    );
    $this->createExchange(array_merge($this->exchange2, $this->accountRecord((array) $this->admin2)));
    $this->activateExchange($this->exchange2);
  }
  /**
   * Creates three accounts.
   */
  protected function createAccounts() {
    $this->account11 = array(
      'exchange' => $this->exchange1,
      'account' => array(
        'name' => 'account11',
        'mail' => 'account11@integralces.net',
        'pass_raw' => 'integralces',
        'firstname' => 'John',
        'surname' => 'Smith',
        'address' => 'Main street 68',
        'town' => 'Manresa',
        'postcode' => '08241',
        'phonemobile' => '123456789',
        'phonework' => '987654321',
        'phonehome' => '135792468',
        'website' => 'http://www.integralces.net',
      ),
      'bankaccount' => array(
        'kind' => '0',
      ),
      'offer' => array(
        array(
          'title' => 'First test offer',
          'body' => 'This is the first test offer from John Smith account.',
          'rate' => '0.35',
          'keywords' => 'test',
        ),
      ),
      'want' => array(
        array(
          'title' => 'First test want',
          'body' => 'This is the first test want from John Smith account.',
          'keywords' => 'test',
        ),
      ),
    );
    $this->createAccount($this->account11);
    $this->activateAccount($this->account11, $this->admin1, 1);
    $this->account12 = array(
      'exchange' => $this->exchange1,
      'account' => array(
        'name' => 'account12',
        'mail' => 'account12@integralces.net',
        'pass_raw' => 'integralces',
        'firstname' => 'Ofelia',
        'surname' => 'Tia',
        'address' => 'Gran vía 25',
        'town' => 'St. vicenç de castellet',
        'postcode' => '08321',
        'phonemobile' => '11111111',
        'phonework' => '22222222',
        'phonehome' => '',
        'website' => '',
      ),
      'bankaccount' => array(
        'kind' => '0',
      ),
      'offer' => array(
        array(
          'title' => 'Second test offer',
          'body' => 'This is the second test offer from Ofelia Tia account.',
          'rate' => 'contact me',
          'keywords' => 'test',
        ),
      ),
      'want' => array(
        array(
          'title' => 'Second test want',
          'body' => 'This is the second test want from Ofelia Tia account.',
          'keywords' => 'test',
        ),
      ),
    );
    $this->createAccount($this->account12);
    $this->activateAccount($this->account12, $this->admin1, 2);
    $this->account22 = array(
      'exchange' => $this->exchange2,
      'account' => array(
        'name' => 'account22',
        'mail' => 'account22@integralces.net',
        'pass_raw' => 'integralces',
        'firstname' => 'Emmy',
        'surname' => 'Noether',
        'address' => 'Gran vía 25',
        'town' => 'Barcelona',
        'postcode' => '08015',
        'phonemobile' => '333333333',
        'phonework' => '444444444',
        'phonehome' => '',
        'website' => '',
      ),
      'bankaccount' => array(
        'kind' => '0',
      ),
      'offer' => array(),
      'want' => array(),
    );
    $this->createAccount($this->account22);
    $this->activateAccount($this->account22, $this->admin2, 1);
  }
  /**
   * Do several transactions.
   */
  protected function doTransactions() {
    $user1 = $this->accountUser($this->account11);
    $user2 = $this->accountUser($this->account12);
    $record = array(
      'buyer' => 'HORA0002',
      'concept' => 'First test transaction.',
      'amount' => '1.25',
    );
    $this->doTransaction($user1, $record);
    $this->assertBalance($user1, '1.25');
    $this->assertBalance($user2, '-1.25');
    $record = array(
      'buyer' => 'HORA0002',
      'concept' => 'Second test transaction.',
      'amount' => '0.75',
    );
    $this->doTransaction($this->accountUser($this->account11), $record);
    $this->assertBalance($user1, '2');
    $this->assertBalance($user2, '-2');
    $record = array(
      'buyer' => 'HORA0001',
      'concept' => 'Third test transaction.',
      'amount' => '0.5',
    );
    $this->doTransaction($user2, $record);
    $this->assertBalance($user1, '1.5');
    $this->assertBalance($user2, '-1.5');
  }
  /**
   * Helper function.
   * @return object
   *   A user object suitable for drupalLogin() function.
   */
  protected function accountUser($record) {
    $user = (object) array(
      'name' => $record['account']['name'],
      'pass_raw' => $record['account']['pass_raw'],
      'mail' => $record['account']['mail'],
    );
    return $user;
  }
  /**
   * Helper function.
   * @return array
   *   User account form array with proper keys.
   */
  protected function accountRecord($record) {
    $ret = array(
      'name' => $record['name'],
      'mail' => $record['mail'],
      'pass[pass1]' => $record['pass_raw'],
      'pass[pass2]' => $record['pass_raw'],
      'ces_firstname[und][0][value]' => $record['firstname'],
      'ces_surname[und][0][value]' => $record['surname'],
      'ces_address[und][0][value]' => $record['address'],
      'ces_town[und][0][value]' => $record['town'],
      'ces_postcode[und][0][value]' => $record['postcode'],
      'ces_phonemobile[und][0][value]' => $record['phonemobile'],
      'ces_phonework[und][0][value]' => $record['phonework'],
      'ces_phonehome[und][0][value]' => $record['phonehome'],
      'ces_website[und][0][value]' => $record['website'],
    );
    return $ret;
  }
  /**
   * Create a new user request.
   *
   * @param array $record
   *   associative array with entries:
   *   - exchange: associative array with entries
   *     - country
   *     - fullname
   *   - account: associative array with entries:
   *     - name
   *     - mail
   *     - firstname
   *     - surname
   *     - address
   *     - town
   *     - postcode
   *     - phonemobile
   *     - phonework
   *     - phonehome
   *     - website
   *   - bankaccount: associative array with entries:
   *     - kind: type of account. Options are 0 (Individual), 1 (Shared),
   *             2 (Organization), 3 (Company), 4 (Public).
   *   - offer: array with zero or more entries. Each of them is an associative
   *   array with entries:
   *     - title
   *     - body
   *     - rate
   *     - keywords
   *   - want: array with zero or more entries. Each of them is an associative
   *   array with entries:
   *     - title
   *     - body
   *     - keywords
   */
  protected function createAccount($record) {
    // Choose country from first page.
    $this->drupalGet('');
    $country = array(
      'country' => $record['exchange']['country'],
    );
    $this->drupalPost(NULL, $country, t('Register'));
    // Choose exchange.
    $this->clickLink($record['exchange']['fullname']);
    // User account. Change field names.
    $account = $this->accountRecord($record['account']);
    $this->drupalPost(NULL, $account, t('Next >>'));
    // Bank account, offers and wants.
    $offers = 0;
    $wants = 0;
    $edit = $record['bankaccount'];
    while ($edit !== FALSE) {
      if ($offers < count($record['offer'])) {
        $op = t('Add offer >>');
        $this->drupalPost(NULL, $edit, $op);
        // Offer.
        $offer = $record['offer'][$offers];
        $edit = array();
        $edit['offers[' . $offers . '][title]'] = $offer['title'];
        $edit['offers[' . $offers . '][body]'] = $offer['body'];
        $edit['offers[' . $offers . '][ces_offer_rate][und][0][value]'] = $offer['rate'];
        $edit['offers[' . $offers . '][keywords]'] = $offer['keywords'];
        $offers++;
      }
      elseif ($wants < count($record['want'])) {
        $op = t('Add want >>');
        $this->drupalPost(NULL, $edit, $op);
        // Want.
        $want = $record['want'][$wants];
        $edit = array();
        $edit['wants[' . $wants . '][title]'] = $want['title'];
        $edit['wants[' . $wants . '][body]'] = $want['body'];
        $edit['wants[' . $wants . '][keywords]'] = $want['keywords'];
        $wants++;
      }
      else {
        $op = t('Create new account');
        $this->drupalPost(NULL, $edit, $op);
        $edit = FALSE;
      }
    }
  }
  /**
   * Activate a requested account.
   *
   * @param array $record
   *   The account record.
   * @param object $admin
   *   The exchange admin user.
   * @param int $index
   *   The index of this user in the ces/admin/account page, in order to click
   *   the proper 'Edit' link.
   */
  protected function activateAccount($record, $admin, $index) {
    // Login exchange admin.
    $this->drupalLogin($admin);
    // Go to accounts admin page.
    $this->drupalGet('ces/admin/account');
    $this->assertText(t('Hidden'));
    $this->clickLink(t('Edit'), $index);
    $this->drupalPost(NULL, array('state' => '1'), t('Save'));
    $this->drupalLogout();
  }
  /**
   * Create a new exchange request.
   */
  protected function createExchange($record) {
    $this->drupalGet('');
    $this->clickLink(t('New exchange'));
    $this->assertText(t('General'));
    $this->assertText(t('Administrator'));
    $this->assertText(t('Location'));
    $this->assertText(t('Currency'));
    $this->assertText(t('Members'));
    $this->drupalPost(NULL, $record, t('Create exchange'));
    $this->assertRaw(t('Exchange %code successfully created.', array('%code' => $record['code'])));
  }
  /**
   * Activate created exchange.
   */
  protected function activateExchange($record) {
    $this->drupalLogin($this->globalAdminUser);
    $this->drupalGet('ces/admin/ces');
    $this->clickLink($record['code'] . ' - ' . $record['fullname']);
    $this->assertFieldByName('code', $record['code']);
    $this->assertFieldByName('fullname', $record['fullname']);
    $this->drupalPost(NULL, array(), t('Activate exchange'));
    $this->assertRaw(t('Exchange %code successfully activated.', array('%code' => $record['code'])));
    $this->assertText(t('Limits'));
    $this->drupalLogout();
  }
  /**
   * Create a transaction.
   *
   * @param object $user
   *   The user who performs the transaction.
   * @param array $record
   *   An associative array with entries:
   *   - buyer: buyer' account number.
   *   - concept
   *   - amount
   *   - seller: seller's account number. If ommited, the default user's account
   *             will be used.
   * @param bool $success
   *   Whether this transaction should be permitted by the system.
   */
  protected function doTransaction($user, $record, $success = TRUE) {
    $this->drupalLogin($user);
    $this->clickLink(t('My account'));
    $this->clickLink(t('Enter transaction'));
    $edit = array(
      'fromaccountname' => $record['buyer'],
      'concept' => $record['concept'],
      'amount' => $record['amount'],
    );
    if (!empty($record['seller'])) {
      $edit['toaccountname'] = $record['seller'];
      if (drupal_substr($record['seller'], 0, 4) != drupal_substr($record['buyer'], 0, 4)) {
        // Interexchange transaction.
        $name = drupal_substr($record['buyer'], 0, 4);
        $element = current($this->xpath($this->constructFieldXpath('name', 'fromexchange')));
        $options = $this->getAllOptions($element);
        foreach ($options as $option) {
          if (((string) $option) == $name) {
            $this->drupalPostAJAX(NULL, array('fromexchange' => ((string) $option['value'])), 'fromexchange');
            break;
          }
        }
      }
    }
    $this->drupalPost(NULL, $edit, t('Create transaction'));
    $this->assertText($record['buyer']);
    if (isset($record['seller'])) {
      $this->assertText($record['seller']);
    }
    $this->assertText($record['amount']);
    $this->assertText($record['amount']);
    $this->drupalPost(NULL, array(), t('Confirm transaction'));
    $okmessage = t('Transaction successfully applied.');
    if ($success) {
      $this->assertText($okmessage);
    }
    else {
      $this->assertNoText($okmessage);
    }
    $this->drupalLogout();
  }
  /**
   * Check that the given user has the given balance in his/her default account.
   */
  public function assertBalance($user, $amount) {
    $this->drupalLogin($user);
    $this->clickLink('My account');
    $this->clickLink('Account statement');
    $this->assertText($amount);
    $this->drupalLogout();
  }
}
