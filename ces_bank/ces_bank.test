<?php
/**
 * @file
 * Tests the functionality bank module.
 */

/**
 * TODO: Document BankTestCase for testing banking functionality.
 */
class BankTestCase extends DrupalWebTestCase {
  /**
   * @var user
   * The site administrator.
   */
  protected $globalAdminUser;
  /**
   * @var user
   * The exchange1 creator and administrator.
   */
  protected $exchange1Admin;
  /**
   * @var user
   * exchange1 first user.
   */
  protected $exchange1User1;
  /**
   * @var user
   * exchange1 second user.
   */
  protected $exchange1User2;
  /**
   * @var user
   * The exchange1 creator and administrator.
   */
  protected $exchange2Admin;
  /**
   * @var user
   * exchange2 first user.
   */
  protected $exchange2User1;
  /**
   * @var user
   * exchange2 second user.
   */
  protected $exchange2User2;
  /**
   * @var user
   * exchange1 and exchange 2 user.
   */
  protected $exchangeXUser1;
  /**
   * @var exchange1 record.
   */
  protected $exchange1;
  /**
   * @var exchange2 record.
   */
  protected $exchange2;
  /**
   * Info for bank test function.
   */
  public static function getInfo() {
    return array(
      'name' => 'ces_bank',
      'description' => 'Test bank module features. Create exchange, create accounts, do transactions...',
      'group' => 'CES',
    );
  }
  /**
   * Set up for bank test function.
   */
  public function setUp() {
    // Enable any modules required for the test. It also enables dependences.
    parent::setUp('ces_bank');
    $bank = new Bank();
    // Create global administrator.
    $this->globalAdminUser = $this->drupalCreateUser(array('administer blocks', 'access administration pages'));
    $permission = array(
      'permission' => Permission::PERMISSION_ADMIN,
      'object' => 'global',
      'objectid' => 0,
      'scope' => 'user',
      'scopeid' => $this->globalAdminUser->uid,
    );
    $bank->createPermission($permission);
    $this->exchange1Admin = $this->drupalCreateUser(array());
    $this->exchange1User1 = $this->drupalCreateUser(array());
    $this->exchange1User2 = $this->drupalCreateUser(array());
    $this->exchange2Admin = $this->drupalCreateUser(array());
    $this->exchange2User1 = $this->drupalCreateUser(array());
    $this->exchange2User2 = $this->drupalCreateUser(array());
    $this->exchangeXUser1 = $this->drupalCreateUser(array());
    $this->exchange1 = array(
      'code' => 'HORA',
      'shortname' => 'EX Bages',
      'name' => 'A bona hora - Ecoxarxa del Bages',
      'website' => 'http://abonahora.wordpress.com',
      'country' => 'ES',
      'region' => 'Bages',
      'town' => 'Manresa',
      'map' => 'http://maps.google.com/?ll=41.723796,1.832142&spn=0.083663,0.145912&hnear=Manresa,+Province+of+Barcelona,+Catalonia,+Spain&t=m&z',
      'currencysymbol' => 'ℏ',
      'currencyname' => 'hora',
      'currenciesname' => 'hores',
      'currencyvalue' => '1.0',
      'currencyscale' => '2',
    );
    $this->exchange2 = array(
      'code' => 'BCNA',
      'shortname' => 'EX Barna',
      'name' => 'Ecoxarxa de Barcelona',
      'website' => 'http://cooperativa.ecoxarxes.cat',
      'country' => 'ES',
      'region' => 'Barcelonès',
      'town' => 'Barcelona',
      'map' => 'http://maps.google.com/barcelona',
      'currencysymbol' => 'ECO',
      'currencyname' => 'eco',
      'currenciesname' => 'ecos',
      'currencyvalue' => '0.1',
      'currencyscale' => '2',
    );
  }
  /**
   * Main code for bank test function.
   */
  public function testBank() {
    // Setup menu block.
    $this->setupMenuBlock();
    // Create first exchange.
    $this->exchange1 = $this->createExchange($this->exchange1Admin, $this->exchange1);
    $this->exchange1 = $this->activateExchange($this->globalAdminUser, $this->exchange1);
    // Create two accounts for 1st exchange.
    $account11 = $this->createAccount($this->exchange1User1, $this->exchange1);
    $account12 = $this->createAccount($this->exchange1User2, $this->exchange1);
    $account11 = $this->activateAccount($this->exchange1Admin, $account11);
    $account12 = $this->activateAccount($this->exchange1Admin, $account12);
    // Create three transactions between these two accounts.
    $this->createTransaction($this->exchange1User1, $account11, $account12, '1.50', 'First transaction');
    $this->createTransaction($this->exchange1User1, $account11, $account12, '2.50', 'Second transaction');
    $this->createTransaction($this->exchange1User2, $account12, $account11, '1.00', 'Third transaction');
    // Check balances.
    $this->assertBalance($this->exchange1User1, $account11, '3.00');
    $this->assertBalance($this->exchange1User2, $account12, '-3.00');
    // Create second exchange.
    $this->exchange2 = $this->createExchange($this->exchange2Admin, $this->exchange2);
    $this->exchange2 = $this->activateExchange($this->globalAdminUser, $this->exchange2);
    // Create two accounts for 2nd exchange.
    $account21 = $this->createAccount($this->exchange2User1, $this->exchange2);
    $account22 = $this->createAccount($this->exchange2User2, $this->exchange2);
    $account21 = $this->activateAccount($this->exchange2Admin, $account21);
    $account22 = $this->activateAccount($this->exchange2Admin, $account22);
    // Create a transaction between the two accounts.
    $this->createTransaction($this->exchange2User1, $account21, $account22, '15', 'First transaction in ECOs');
    // Create a failed transaction between exchanges.
    $this->createTransaction($this->exchange2User2, $account22, $account11, '25', 'First inter exchange transaction', FALSE);
    // The two virtual should been created. Activate them.
    $this->activateAccount($this->exchange1Admin, array('name' => 'HORABCNA'));
    $this->activateAccount($this->exchange2Admin, array('name' => 'BCNAHORA'));
    // Re-trigger transaction.
    $this->triggerTransaction($this->exchange2User2);
    // Assert currency conversion.
    $this->assertBalance($this->exchange2User2, $account11, '10.00');
    $this->assertBalance($this->exchange1User1, $account12, '0.50');
    // Configure limit chains.
    $this->addLimit($this->exchange1Admin, 'default', 'AbsoluteDebitLimit', '-1.0', TRUE);
    $this->addLimit($this->exchange2Admin, 'default', 'AbsoluteDebitLimit', '0.0', TRUE);
    $this->createTransaction($this->exchange1User2, $account12, $account11, '1.0', 'Limit chain pass test', TRUE);
    $this->createTransaction($this->exchange1User2, $account12, $account11, '1.0', 'Limit chain fail test', FALSE);
    $this->createTransaction($this->exchange2User1, $account21, $account22, '10', 'Limit chain pass test', TRUE);
    $this->createTransaction($this->exchange2User1, $account21, $account22, '1', 'Limit chain fail test', FALSE);
  }
  /**
   * Add limit test function.
   */
  protected function addLimit($user, $chain, $classname, $value, $block) {
    $this->drupalLogin($user);
    $this->drupalGet('ces/bank/dashboard');
    $this->clickLink(t('Administrative interface'));
    $this->clickLink(t('Administer limit chains'));
    $this->clickLink(t('Edit'));
    $edit = array(
      'newlimit[classname]' => $classname,
    );
    $this->drupalPost(NULL, $edit, t('Add limit'));
    $edit = array(
      'limits[0][block]' => $block,
      'limits[0][value]' => $value,
    );
    $this->drupalPost(NULL, $edit, t('Update limit chain'));
    $this->assertRaw(t('Limit chain %chain successfully updated.', array('%chain' => $chain)));
  }
  /**
   * Set up menu block test function.
   */
  protected function setupMenuBlock() {
    $this->drupalLogin($this->globalAdminUser);
    $this->drupalPost('admin/structure/block', array('blocks[ces_bank_navigation][region]' => 'sidebar_first'), t('Save blocks'));
    $this->assertFieldByName('blocks[ces_bank_navigation][region]', 'sidebar_first');
    $this->drupalGet('ces/bank/dashboard');
    $this->assertText(t('CES Navigation'));
  }
  /**
   * Assert balance test function.
   */
  protected function assertBalance($user, $account, $amount) {
    // @TODO: assuere account is the given. Assert balance also in account statement.
    $this->drupalLogin($user);
    $this->drupalGet('ces/bank/dashboard');
    $this->clickLink(t('Dashboard'));
    $this->assertText($amount);
  }
  /**
   * Activate account test function.
   */
  protected function activateAccount($admin, $record) {
    $this->drupalLogin($admin);
    $this->drupalGet('ces/bank/dashboard');
    $this->clickLink(t('Administrative interface'));
    $this->clickLink($record['name']);
    $this->drupalPost(NULL, array(), t('Activate account'));
    $this->assertRaw(t('Account sucessfully activated.'));
    return $record;
  }
  /**
   * Create exchange bank test function.
   */
  protected function createExchange($admin, $record) {
    $this->drupalLogin($admin);
    $this->drupalGet('ces/bank/exchange/new');
    $this->assertText(t('General'));
    $this->assertText(t('Location'));
    $this->assertText(t('Currency'));
    $this->drupalPost(NULL, $record, t('Create exchange'));
    $this->assertRaw(t('Exchange %code successfully created.', array('%code' => $record['code'])));
    return $record;
  }
  /**
   * Activate exchange bank test function.
   */
  protected function activateExchange($globaladmin, $record) {
    $this->drupalLogin($globaladmin);
    $this->drupalGet('ces/bank/admin');
    $this->clickLink($record['code'] . ' - ' . $record['name']);
    $this->assertFieldByName('code', $record['code']);
    $this->assertFieldByName('name', $record['name']);
    $this->drupalPost(NULL, array(), t('Activate exchange'));
    $this->assertRaw(t('Exchange %code successfully activated.', array('%code' => $record['code'])));
    $this->assertText(t('Limits'));
    return $record;
  }
  /**
   * Create account bank test function.
   */
  protected function createAccount($user, $exchange) {
    static $lastAccountId = array();
    if (!isset($lastAccountId[$exchange['code']])) {
      $lastAccountId[$exchange['code']] = 0;
    }
    $this->drupalLogin($user);
    $this->drupalGet('ces/bank/exchange');
    // Little hack:
    $index = ($exchange['code'] == $this->exchange1['code']) ? 0 : 1;
    $this->clickLink(t('Register'), $index);
    $record = array(
      'kind' => '0',
    );
    $name = $exchange['code'] . '000' . ($lastAccountId[$exchange['code']] + 1);
    $this->assertFieldByName('name', $name);
    $this->assertFieldByName('username', $user->name);
    $this->drupalPost(NULL, $record, t('Create account'));
    $this->assertText(t('Account successfully created.'));
    $lastAccountId[$exchange['code']]++;
    $record['name'] = $name;
    $record['username'] = $user->name;
    return $record;
  }
  /**
   * Create transaction bank test function.
   */
  protected function createTransaction($user, $seller, $buyer, $amount, $concept, $successful = TRUE) {
    $this->drupalLogin($user);
    $this->drupalGet('ces/bank/dashboard');
    $this->clickLink(t('Charge a sale'));
    $edit = array(
      'fromaccountname' => $buyer['name'],
      'concept' => $concept,
      'amount' => $amount,
    );
    if (drupal_substr($seller['name'], 0, 4) != drupal_substr($buyer['name'], 0, 4)) {
      // Interexchange transaction.
      $name = drupal_substr($buyer['name'], 0, 4);
      $element = current($this->xpath($this->constructFieldXpath('name', 'fromexchange')));
      $options = $this->getAllOptions($element);
      foreach ($options as $option) {
        if (((string) $option) == $name) {
          $this->drupalPostAJAX(NULL, array('fromexchange' => ((string) $option['value'])), 'fromexchange');
          break;
        }
      }
    }
    $this->drupalPost(NULL, $edit, t('Create transaction'));
    $this->assertText($seller['name']);
    $this->assertText($buyer['name']);
    $this->assertText($amount);
    $this->assertText($concept);
    $this->drupalPost(NULL, array(), t('Confirm transaction'));
    $okmessage = t('Transaction successfully applied.');
    if ($successful) {
      $this->assertText($okmessage);
    }
    else {
      $this->assertNoText($okmessage);
    }
  }
  /**
   * Trigger transaction bank test function.
   */
  protected function triggerTransaction($user, $successful = TRUE) {
    $this->drupalLogin($user);
    $this->drupalGet('ces/bank/dashboard');
    $this->clickLink(t('Statement'));
    $this->clickLink('Trigger');
    $this->drupalPost(NULL, array(), t('Trigger transaction'));
    $okmessage = t('Transaction successfully applied.');
    if ($successful) {
      $this->assertText($okmessage);
    }
    else {
      $this->assertNoText($okmessage);
    }
  }
}
