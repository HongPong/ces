<?php
/**
 * @file
 * Implements the drupal hooks for this module.
 */

define('CES_CURRENT_ACCOUNT', 'ces_current_account');
define('CES_CURRENT_EXCHANGE', 'ces_current_exchange');

/**
 * Implements hook_help().
 */
function ces_bank_help($path, $arg) {
  switch ($path) {
    case 'ces/bank/selleractions/sell':
      return '<p>' . t('Charge a sale. Select the payer account, enter a short
        decription and the amount of the transaction. This amount will be
        trasferred to your account.') . '</p>';

    case 'ces/bank/exchange/accounts':
      return '<p>' . t('All users and banking accounts of your exchange.') . '</p>';

    case 'ces/bank/account/transaction':
      return '<p>' . t('Showing your transactions. Set the "From" and "To"
        dates to see a specific time range.') . '</p>';

    case 'ces/register/%':
      return '<p>' . t('Click on the exchange you want to join.') . '</p>';
  }
}
/**
 * Implements hook_theme().
 */
function ces_bank_theme() {
  return array(
    'ces_bank_exchange_view' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'ces_bank'),
      'file' => 'ces_bank.theme.inc',
    ),
    'ces_bank_account_view' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'ces_bank'),
      'file' => 'ces_bank.theme.inc',
    ),
    'ces_bank_transaction_view' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'ces_bank'),
      'file' => 'ces_bank.theme.inc',
    ),
    'ces_bank_limitchain_view' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'ces_bank'),
      'file' => 'ces_bank.theme.inc',
    ),
  );
}
/**
 * Special permissions access callback for CES banking functions.
 */
function ces_bank_access($permission, $object, $objectid, $account = NULL) {
  global $user;
  $args = func_get_args();
  if (empty($args[3])) {
    $args[3] = $user->uid;
  }
  _ces_bank_replace_current_args($args);
  if ($objectid === FALSE) {
    return FALSE;
  }
  $bank = new Bank();
  return $bank->access($args[0], $args[1], $args[2], $args[3]);
}
/**
 * Menu hook for ces_bank. Includes most CES menu functions.
 */
function ces_bank_menu() {
  $menu['ces/admin/ces'] = array(
    'title' => 'Administer CES bank',
    'description' => 'Top administer interface for CES Bank',
    'page callback' => 'ces_bank_admin_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 990,
  );
  // Superglobal menu (before login). Creating new exchange.
  $menu['ces/bank/exchange/new'] = array(
    'title' => 'New exchange',
    'description' => 'Create a new exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'new'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'global exchangecreator', 0),
    'type' => MENU_NORMAL_ITEM,
  );
  // Administrative menu items for the exchange administrator.
  $menu['ces/admin'] = array(
    'title' => 'Administration',
    'decription' => 'Administration interfaces',
    'page callback' => 'ces_bank_exchange_admin',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 900,
    'expanded' => TRUE,
  );
  // Accounts administration.
  $menu['ces/admin/account'] = array(
    'title' => 'Accounts',
    'description' => 'Administer accounts',
    'page callback' => 'ces_bank_accounts_admin',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 905,
    'expanded' => TRUE,
  );
  $menu['ces/admin/account/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/admin/account/new'] = array(
    'title' => 'New',
    'description' => 'New account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_form'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 1,
  );
  $menu['ces/admin/account/%ces_account/view'] = array(
    'title' => 'View',
    'description' => 'View account',
    'page callback' => 'ces_bank_account_view',
    'page arguments' => array(3),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 2,
  );
  $menu['ces/admin/account/%ces_account/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 3,
  );
  $menu['ces/admin/account/%ces_account/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_account_delete_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 4,
  );
  $menu['ces/bank/selleractions'] = array(
    'title' => 'Seller actions',
    'description' => 'Operations related to sell from your account.',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_transaction_form', 'new', CES_CURRENT_EXCHANGE, CES_CURRENT_ACCOUNT, NULL),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'account seller', CES_CURRENT_ACCOUNT),
    'expanded' => TRUE,
    'weight' => 300,
  );
  $menu['ces/bank/selleractions/sell'] = array(
    'title' => 'Enter transaction',
    'description' => 'Charge a sale to an account.',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_transaction_form', 'new', CES_CURRENT_EXCHANGE, CES_CURRENT_ACCOUNT, NULL),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'account seller', CES_CURRENT_ACCOUNT),
    'weight' => 310,
  );
  $menu['ces/bank/selleractions/invoice'] = array(
    'title' => 'Send invoice',
    'description' => 'Send an invoice to a client by email.',
    'page callback' => 'ces_bank_not_yet_implemented',
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'account seller', CES_CURRENT_ACCOUNT),
    'weight' => 320,
  );
  $menu['ces/bank/buyeractions'] = array(
    'title' => 'Buyer actions',
    'description' => 'Operations related to buy from your account.',
    'page callback' => 'ces_bank_not_yet_implemented',
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'account details', CES_CURRENT_ACCOUNT),
    'weight' => 400,
    'expanded' => TRUE,
  );
  $menu['ces/bank/buyeractions/order'] = array(
    'title' => 'Send order',
    'description' => 'Send an order to a provider by email.',
    'page callback' => 'ces_bank_not_yet_implemented',
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'account details', CES_CURRENT_ACCOUNT),
    'weight' => 410,
  );
  $menu['ces/bank/account'] = array(
    'title' => 'My account',
    'description' => 'View account details.',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_account_statement_form', CES_CURRENT_ACCOUNT),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'account transactions', CES_CURRENT_ACCOUNT),
    'expanded' => TRUE,
    'weight' => 500,
  );
  $menu['ces/bank/exchange'] = array(
    'title' => 'Exchange',
    'description' => 'View exchange details',
    'page callback' => 'ces_bank_exchange_view',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange details', CES_CURRENT_EXCHANGE),
    'expanded' => TRUE,
    'weight' => 600,
  );
  $menu['ces/bank/exchange/accounts'] = array(
    'title' => 'Accounts',
    'description' => 'Vieu exchange accounts list',
    'page callback' => 'ces_bank_exchange_accounts_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange accounts', CES_CURRENT_EXCHANGE),
    'weight' => 610,
  );
  $menu['ces/bank/exchange/stats'] = array(
    'title' => 'Statistics',
    'description' => 'View exchange statistics.',
    'page callback' => 'ces_bank_not_yet_implemented',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange details', CES_CURRENT_EXCHANGE),
    'weight' => 620,
  );
  $menu['ces/bank/exchange/list/%'] = array(
    'title' => 'Exchanges in your country',
    'description' => 'List of exchanges in your country',
    'page callback' => 'ces_bank_exchange_list_page',
    'page arguments' => array(4),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'global statistics', 0),
    'type' => MENU_CALLBACK,
  );

  $menu['ces/bank/user/autocomplete'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange accounts', CES_CURRENT_EXCHANGE),
    'page callback' => 'ces_bank_user_autocomplete',
  );
  $menu['ces/admin/exchange'] = array(
    'title' => 'Edit exchange',
    'description' => 'Edit exchange',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'edit', CES_CURRENT_EXCHANGE),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('edit', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 910,
  );
  $menu['ces/admin/exchange/%/activate'] = array(
    'title' => 'Activate exchange',
    'description' => 'Activate exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'activate', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
  );
  /* Begin limit chains */
  $menu['ces/admin/limit'] = array(
    'title' => 'Limits',
    'description' => 'Types of debit and credit limits for accounts.',
    'page callback' => 'ces_bank_limitchain_list_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange limitchains', CES_CURRENT_EXCHANGE),
  );
  $menu['ces/admin/limit/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/admin/limit/new'] = array(
    'title' => 'New',
    'description' => 'Create a new account limit.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_limitchain_form'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_CURRENT_EXCHANGE),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $menu['ces/admin/limit/%ces_limitchain/view'] = array(
    'title' => 'View',
    'description' => 'View account limit details.',
    'page callback' => 'ces_bank_limitchain_view',
    'page arguments' => array(3),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'exchange limitchains', CES_CURRENT_EXCHANGE),
    'weight' => 2,
  );
  $menu['ces/admin/limit/%ces_limitchain/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit account limit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_limitchain_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('edit', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 3,
  );
  $menu['ces/admin/limit/%ces_limitchain/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete account limit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_limitchain_delete_form', 3),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'exchange', CES_CURRENT_EXCHANGE),
    'weight' => 4,
  );
  /* End limit chains */
  $menu['ces/admin/ces'] = array(
    'title' => 'Administer CES bank',
    'description' => 'Top administer interface for CES Bank',
    'page callback' => 'ces_bank_admin_page',
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('admin', 'global', 0),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 990,
  );
  // Superglobal menu (before login).
  $menu['ces/bank/exchange/new'] = array(
    'title' => 'New exchange',
    'description' => 'Create a new exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_exchange_form', 'new'),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('use', 'global exchangecreator', 0),
    'type' => MENU_CALLBACK,
  );
  $menu['ces/bank/account/transaction'] = array(
    'title' => 'Account statement' ,
    'description' => 'Last transactions with this account',
    'page callback' => '_ces_bank_get_form',
    'page arguments' => array('ces_bank_account_statement_form', CES_CURRENT_ACCOUNT),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_bank_access',
    'access arguments' => array('view', 'account transactions', CES_CURRENT_ACCOUNT),
    'weight' => 510,
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['ces/bank/account/transaction/list'] = array(
    'title' => 'Account statement',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $menu['ces/bank/account/transaction/%ces_transaction/view'] = array(
    'title' => 'View',
    'page callback' => 'ces_bank_transaction_view',
    'page arguments' => array(4),
    'file' => 'ces_bank.pages.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_transaction_access',
    'access arguments' => array('view', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $menu['ces/bank/account/transaction/%ces_transaction/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit transaction.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_transaction_form', 'edit', 4),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_transaction_access',
    'access arguments' => array('edit', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $menu['ces/bank/account/transaction/%ces_transaction/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete transaction.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ces_bank_transaction_delete_form', 4),
    'file' => 'ces_bank.forms.inc',
    'file path' => drupal_get_path('module', 'ces_bank'),
    'access callback' => 'ces_transaction_access',
    'access arguments' => array('edit', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  return $menu;
}
/**
 * Implements hook_load().
 */
function ces_transaction_load($id = NULL) {
  if (empty($id) || !is_numeric($id)) {
    return FALSE;
  }
  $bank = new Bank();
  $transaction = $bank->getTransaction($id);
  return $transaction;
}
/**
 * Access transaction information or use.
 */
function ces_transaction_access($permission, $transaction, $account = NULL) {
  return ces_bank_access($permission, 'account buyer', $transaction['fromaccount'], $account)
      || ces_bank_access($permission, 'account seller', $transaction['toaccount'], $account);
}
/**
 * Implements hook_load().
 */
function ces_limitchain_load($id = NULL) {
  if (empty($id) || !is_numeric($id)) {
    return FALSE;
  }
  $bank = new Bank();
  $limitchain = $bank->getLimitChain($id);
  return $limitchain;
}
/**
 * Implements hook_load().
 */
function ces_account_load($id = NULL) {
  if (empty($id) || !is_numeric($id)) {
    return FALSE;
  }
  $bank = new Bank();
  $account = $bank->getAccount($id);
  return $account;
}
/**
 * Calls drupal_get_form() replacing some of its arguments by the default exchange or account.
 */
function _ces_bank_get_form() {
  $args = func_get_args();
  _ces_bank_replace_current_args($args);
  return call_user_func_array('drupal_get_form', $args);
}
/**
 * Helper function for replacing menu callback arguments.
 */
function _ces_bank_replace_current_args(&$args) {
  foreach ($args as $i => $arg) {
    if ($arg === CES_CURRENT_ACCOUNT) {
      if (($account = ces_bank_get_current_account()) !== FALSE) {
        $args[$i] = $account['id'];
      }
      else {
        $args[$i] = FALSE;
      }
    }
    elseif ($arg === CES_CURRENT_EXCHANGE) {
      if (($account = ces_bank_get_current_account()) !== FALSE) {
        $args[$i] = $account['exchange'];
      }
      else {
        $args[$i] = FALSE;
      }
    }
  }
  return $args;
}
/**
 * Implements hook_account_limit_classes().
 */
function ces_bank_account_limit_classes() {
  return array(
    'AbsoluteCreditLimit' => t('Absolute credit limit'),
    'AbsoluteDebitLimit' => t('Absolute debit limit'),
  );
}

/**
 * Implements hook_decorated_transaction_classes().
 */
function ces_bank_decorated_transaction_classes() {
  return array('InterExchangeTransaction', 'LevyedTransaction');
}
/**
 * Implements hook_user_presave().
 */
function ces_bank_user_presave(&$edit, $account, $category) {
  if (isset($edit['ces_current_account'])) {
    $edit['data']['ces_current_account'] = $edit['ces_current_account'];
  }
}
/**
 * Implements hook_user_load().
 */
function ces_bank_user_load($users) {
  $bank = new Bank();
  foreach ($users as $uid => $account) {
    if (ces_bank_get_current_account($account) === FALSE) {
      $bankaccounts = $bank->getUserAccounts($uid);
      if (!empty($bankaccounts)) {
        $firstbankaccount = reset($bankaccounts);
        $users[$uid]->data['ces_current_account'] = $firstbankaccount['id'];
      }
    }
  }
}
/**
 * Implements hook_token_info().
 */
function ces_bank_token_info() {
  return array(
    'types' => array(
      'exchange' => array(
        'name' => t('Exchange'),
        'description' => t('Tokens for bank exchanges.'),
      ),
      'account' => array(
        'name'  => t('Account'),
        'description' => t('Tokens for bank accounts.'),
      ),
      'transaction' => array(
        'name' => t('Transaction'),
        'description' => t('Tokens for bank transactions.'),
      ),
    ),
    'tokens' => array(
      'exchange' => array(
        'code' => array(
          'name'   => t('Exchange code'),
          'description' => t('The 4 letter exchange code.'),
        ),
        'shortname' => array(
          'name' => t('Exchange short name'),
          'description' => t('Exchange short name.'),
        ),
        'name' => array(
          'name' => t('Exchange full name'),
          'description' => t('Exchange full name.'),
        ),
        'country' => array(
          'name' => t('Exchange country'),
          'description' => t('Exchange country.'),
        ),
        'town' => array(
          'name' => t('Exchange town'),
          'description' => t('Exchange town.'),
        ),
        'region' => array(
          'name'   => t('Exchange region'),
          'description' => t('Exchange region within the country.'),
        ),
        'website' => array(
          'name' => t('Exchange website'),
          'description' => t('Exchange website.'),
        ),
        'currencysymbol' => array(
          'name' => t('Currency symbol'),
          'description' => t('Exchange currency symbol.'),
        ),
        'currencyname' => array(
          'name'   => t('Currency name'),
          'description' => t('Exchange currency name.'),
        ),
        'currenciesname' => array(
          'name'   => t('Currency name plural'),
          'description' => t('Exchange currency name in plural.'),
        ),
        'currencyvalue' => array(
          'name'   => t('Currency value'),
          'description' => t('Exchange currency value in hours of work.'),
        ),
        'admin' => array(
          'name'   => t('Exchange administrator'),
          'description' => t('Exchange administrator user.'),
          'type' => 'user',
        ),
      ),
      'account' => array(
        'name' => array(
          'name' => t('Account identifier'),
          'description' => t('4 letter exchange identifier plus 4 number account code.'),
        ),
        'kind' => array(
          'name' => t('Type'),
          'description' => t('Account type.'),
        ),
        'user' => array(
          'name' => t('Account user'),
          'description' => t('Account user.'),
          'type' => 'user',
        ),
      ),
      'transaction' => array(
        'fromaccount' => array(
          'name' => t('Buyer account'),
          'description' => t('The buyer account object.'),
          'type' => 'account',
        ),
        'toaccount' => array(
          'name' => t('Seller account'),
          'description' => t('The seller account object.'),
          'type' => 'account',
        ),
        'amount' => array(
          'name' => t('Amount'),
          'description' => t('The transaction amount.'),
        ),
        'concept' => array(
          'name' => t('Description'),
          'description' => t('The concept of the transaction.'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function ces_bank_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'exchange' && !empty($data['exchange'])) {
    $exchange = $data['exchange'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'code':
          $replacements[$original] = $sanitize ? check_plain($exchange['code']) : $exchange['code'];
          break;

        case 'shortname':
          $replacements[$original] = $sanitize ? check_plain($exchange['shortname']) : $exchange['shortname'];
          break;

        case 'name':
          $replacements[$original] = $sanitize ? check_plain($exchange['name']) : $exchange['name'];
          break;

        case 'country':
          $replacements[$original] = $sanitize ? check_plain($exchange['country']) : $exchange['country'];
          break;

        case 'town':
          $replacements[$original] = $sanitize ? check_plain($exchange['town']) : $exchange['town'];
          break;

        case 'region':
          $replacements[$original] = $sanitize ? check_plain($exchange['region']) : $exchange['region'];
          break;

        case 'website':
          $replacements[$original] = $sanitize ? check_plain($exchange['website']) : $exchange['website'];
          break;

        case 'currencysymbol':
          $replacements[$original] = $sanitize ? check_plain($exchange['currencysymbol']) : $exchange['currencysymbol'];
          break;

        case 'currencyname':
          $replacements[$original] = $sanitize ? check_plain($exchange['currencyname']) : $exchange['currencyname'];
          break;

        case 'currenciesname':
          $replacements[$original] = $sanitize ? check_plain($exchange['currenciesname']) : $exchange['currenciesname'];
          break;

        case 'currencyvalue':
          $replacements[$original] = $sanitize ? check_plain($exchange['currencyvalue']) : $exchange['currencyvalue'];
          break;

      }
    }
    if ($admin_tokens = token_find_with_prefix($tokens, 'admin')) {
      $replacements += token_generate('user', $admin_tokens, array('user' => user_load($exchange['admin'])), $options);
    }
  }
  if ($type == 'account' && !empty($data['account'])) {
    $account = $data['account'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'name':
          $replacements[$original] = $sanitize ? check_plain($account['name']) : $account['name'];
          break;

        case 'kind':
          $replacements[$original] = $sanitize ? check_plain($account['kind']) : $account['kind'];
          break;
      }
    }
    if ($user_tokens = token_find_with_prefix($tokens, 'user')) {
      $account_user = reset($account['users']);
      $uid = $account_user['user'];
      $replacements += token_generate('user', $user_tokens, array('user' => user_load($uid)), $options);
    }
  }
  if ($type == 'transaction' && !empty($data['transaction'])) {
    $transaction = $data['transaction'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'amount':
          $replacements[$original] = $sanitize ? check_plain($transaction['amount']) : $transaction['amount'];
          break;

        case 'concept':
          $replacements[$original] = $sanitize ? check_plain($transaction['concept']) : $transaction['concept'];
          break;
      }
      if ($fromaccount_tokens = token_find_with_prefix($tokens, 'fromaccount')) {
        $bank = new Bank();
        $replacements += token_generate('account', $fromaccount_tokens, array('account' => $bank->getAccountByName($transaction['fromaccount'])), $options);
      }
      if ($toaccount_tokens = token_find_with_prefix($tokens, 'toaccount')) {
        $bank = new Bank();
        $replacements += token_generate('account', $toaccount_tokens, array('account' => $bank->getAccountByName($transaction['toaccount'])), $options);
      }
    }
  }
  return $replacements;
}
/**
 * Implements ces_notify_messages().
 */
function ces_bank_ces_notify_messages($key, $langcode) {
  $a = array();
  $b = array('langcode' => $langcode);
  switch ($key) {
    case 'new exchange':
      return array(
        'subject' => t('[Integral CES] New Exchange [exchange:code] - [exchange:shortname] request', $a, $b),
        'body' => t('A new exchange has been registered.

Visit the CES administrative interface at [url:absolute]/admin/ces to activate or discard it. See some details below:

Code: [exchange:code]
Short name: [exchange:shortname]
Full name: [exchange:name]
Country: [exchange:country]
Location: [exchange:town] ([exchange:region])
Web site: [exchange:website]
Currency: [exchange:currencysymbol] ( [exchange:currencyname] ), value [exchange:currencyvalue]
User: [exchange:admin:name] <[exchange:admin:mail]>

', $a, $b),
      );
    case 'exchange activated':
      return array(
        'subject' => t('[Integral CES] Exchange [exchange:code] - [exchange:shortname] activated', $a, $b),
        'body' => t('Dear [exchange:admin:name],
The new [exchange:fullname] has been activated. So far we have only created the
administrator\'s account, [exchange:code]0000. Don\'t use this account for
personal operations. Create a new user and a new account for your personal
activity within the exchange network.

As there is great demand for this web service we have to limit the period that
we can give you to get this new exchange operational. If there is no trading
activity within six months of today then unfortunately we will have to take the
exchange down to make space for others.

This is only the begining. You have a great work making this exchange network a
really useful tool.

Please confirm that you have received this welcome letter.

IntegralCES', $a, $b),
      );

    case 'new account':
      return array(
        'subject' => t('[[exchange:shortname]] New account request [account:name]', $a, $b),
        'body' => t('Another account request for [exchange:name]. Go to the administrative interface at [url:absolute]/ces/bank/exchange/admin to activate or discard it.

See registration details below:

Exchange: [exchange:code]
Account name: [account:name]
Account type: [account:kind]
User: [account:user:fullname]

Integral CES
', $a, $b),
      );

    case 'account activated':
      return array(
        'subject' => t('[[exchange:shortname]] Account activated'),
        'body' => t('Dear [account:name],

Welcome to the [exchange:fullname], your local exchange of the global Integral
Community Exchange System platform.
Below are the details you need to access your account on the [exchange:code]
network. To get to the web site go to [url:absolute]. This will take you to the
login page.

Enter the following information:

Account No: [account:code]
Password: *

The web interface is available in several languages. If you wish to select
another language, click on the your name at the top right corner. In your
personal profile simply select the language of your preference.

Please read the <a href="http://www.integralces.net/doc/user">User Guide</a> to
find out how the site works.

After looking around please enter your \'offers\' and \'wants\' by clicking on
the My offers and My wants buttons at the left menu. If you provided offers with
your application you may add as many additional offerings as you like.

You can also upload a photograph of yourself so that other users can see what
you look like.

Feel free to contact any advertiser in the \'Offers\' list to purchase any goods
and services offered. Please don\'t wait for someone to buy from you before you
use the system. You don\'t need to be in credit before making a purchase; going
into debit is part of the system and simply represents your commitment to the
community.

If you require any assistance please contact me. I will be glad to help.

Happy trading!

[exchange:shortname] administrator:
[exchange:admin:fullname]
[exchange:admin:mail]
[exchange:admin:mainphone]
', $a, $b),
      );

    case 'account debited':
      return array(
        'subject' => t('[[exchange:shortname]] Your account [transaction:fromaccount:name] has been debited'),
        'body' => t(
'[transaction:fromaccount:exchange:name]: Your account [transaction:fromaccount:name]
has been debited.

Transaction details:

Seller account: [transaction:toaccount:name]
Seller name: [transaction:toaccount:user:fullname]

Buyer account: [transaction:fromaccount:name]
Buyer name: [transaction:fromaccount:user:fullname]

Description: [transaction:concept]
Amount: [transaction:amount][transaction:fromaccount:exchange:currencysymbol]

Ordered by: [transaction:user:fullname] <[transaction:user:mail]>

View your current <a href="[url:absolute]/ces/bank/account/transaction">statement of account</a>.

If this debit is incorrect contact the seller or the exchange administrator
within 10 days to have it corrected.

Seller contact:
[transaction:toaccount:user:fullname]
mail: <[transaction:toaccount:user:mail]>
phone: [transaction:toaccount:user:mainphone]
', $a, $b),
      );

    case 'account credited':
      return array(
        'subject' => t('[[exchange:shortname]] Your account [transaction:toaccount:name] has been credited'),
        'body' => t('[transaction:toaccount:exchange:name]:Your account [transaction:toaccount:name] has been credited.

Transaction details:

Seller account: [transaction:toaccount:name]
Seller name: [transaction:toaccount:user:fullname]

Buyer account: [transaction:fromaccount:name]
Buyer name: [transaction:fromaccount:user:fullname]

Description: [transaction:concept]
Amount: [transaction:amount][transaction:fromaccount:exchange:currencysymbol]

Ordered by: [transaction:user:fullname] <[transaction:user:mail]>

If this credit is incorrect contact the seller or the exchange administrator
within 10 days to have it corrected.
', $a, $b),
      );
  }
  return FALSE;
}

/**
 * Given a drupal account, returns its full username.
 * 
 * @param object $account
 *   Drupal user object.
 */
function ces_bank_get_full_username($account) {
  $userfullname = '';
  if (($items = field_get_items('user', $account, 'ces_firstname')) !== FALSE) {
    $item = reset($items);
    $userfullname .= $item['safe_value'];
  }
  if (($items = field_get_items('user', $account, 'ces_surname')) !== FALSE) {
    $item = reset($items);
    if (!empty($userfullname)) {
      $userfullname .= ' ';
    }
    $userfullname .= $item['safe_value'];
  }
  if (empty($userfullname)) {
    $userfullname = $account->name;
  }
  return $userfullname;
}
/**
 * Get current bank account.
 * 
 * @return array
 *   The current user's account.
 */
function ces_bank_get_current_account($account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = user_load($user->uid);
  }
  $bank = new Bank();
  if (isset($account->data['ces_current_account'])) {
    try {
      $bankaccount = $bank->getAccount($account->data['ces_current_account']);
    }
    catch (Exception $e) {
      $bankaccount = FALSE;
    }
  }
  else {
    $bankaccount = FALSE;
  }
  return $bankaccount;
}
/**
 * Get current exchange.
 * 
 * @return array
 *   The current user's exchange
 */
function ces_bank_get_current_exchange($account = NULL) {
  $bankaccount = ces_bank_get_current_account($account);
  if ($bankaccount === FALSE) {
    $path = arg();
    if ($path[0] == 'user' && $path[1] == 'register') {
      $exchange = ces_bank_get_exchange_by_name($path[2]);
    }
    else {
      $exchange = FALSE;
    }
  }
  else {
    $exchange = ces_bank_get_exchange($bankaccount['exchange']);
  }
  return $exchange;
}
/**
 * Returns exchange given its id.
 */
function ces_bank_get_exchange($id) {
  $bank = new Bank();
  $exchange = $bank->getExchange($id);
  return $exchange;
}
/**
 * Returns exchange given its name.
 */
function ces_bank_get_exchange_by_name($name) {
  $bank = new Bank();
  $exchange = $bank->getExchangeByName($name);
  return $exchange;
}
/**
 * Returns all exchanges.
 */
function ces_bank_get_exchanges() {
  $bank = new Bank();
  $exchanges = $bank->getAllExchanges();
  return $exchanges;
}
/**
 * Helper function.
 */
function ces_bank_not_yet_implemented() {
  return array(
    '#markup' => t('Not yet implemented. Sorry!'),
  );
}

/**
 * Implements hook_user_view().
 */
function ces_bank_user_view($user, $view_mode, $langcode) {
  $bank = new Bank();
  $accounts = $bank->getUserAccounts($user->uid);
  foreach ($accounts as $account) {
    if (!ces_bank_access('view', 'exchange accounts', $account['exchange'])) {
      continue;
    }
    $exchange = $bank->getExchange($account['exchange']);
    $limitchain = $bank->getLimitChain($account['limitchain']);
    $accounting = array(
      '#type' => 'container',
      '#attributes' => array(),
      '#weight' => 1,
    );
    $accounting['name'] = array(
      '#type' => 'markup',
      '#prefix' => '<h3>',
      '#suffix' => '</h3>',
      '#markup' => $account['name'],
      '#weight' => 0,
    );
    $accounting['balance'] = array(
      '#theme' => 'user_profile_item',
      '#title' => t('Balance'),
      '#markup' => $bank->formatAmount($account['balance'], $exchange),
      '#weight' => 10,
    );
    $sales = $bank->getAccountHistoricSales($account['id'], 0);
    $accounting['sales'] = array(
      '#theme' => 'user_profile_item',
      '#title' => t('Sales'),
      '#markup' => $bank->formatAmount($sales, $exchange),
      '#weight' => 20,
    );
    $purchases = $bank->getAccountHistoricPurchases($account['id'], 0);
    $accounting['purchases'] = array(
      '#theme' => 'user_profile_item',
      '#title' => t('Purchases'),
      '#markup' => $bank->formatAmount($purchases, $exchange),
      '#weight' => 30,
    );
    $accounting['limit'] = array(
      '#theme' => 'user_profile_item',
      '#title' => t('Limit'),
      '#markup' => $limitchain['name'],
      '#weight' => 40,
    );
    $user->content['account_' . $account['name']] = $accounting;
  }
}
/**
 * Implements hook_menu_alter().
 */
function ces_bank_menu_alter(&$items) {
  $items['user/%user']['access callback'] = 'ces_bank_user_access';
  $items['user/%user']['access arguments'] = array('view', 1);
}
/**
 * Checks access to bank account.
 */
function ces_bank_user_access($permission, $target, $account = NULL) {
  $bank = new Bank();
  $accounts = $bank->getUserAccounts($target->uid);

  foreach ($accounts as $acc) {
    if (ces_bank_access($permission, 'exchange accounts', $acc['exchange'], $account)) {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Returns the list of countries having at least one exchange.
 */
function ces_bank_country_get_list() {
  if (($cache = cache_get('ces_bank_countries')) !== FALSE) {
    $countries = $cache->data;
  }
  else {
    require_once DRUPAL_ROOT . '/includes/locale.inc';
    $allcountries = country_get_list();
    $bank = new Bank();
    $exchanges = $bank->getAllExchanges();
    $countries = array();
    foreach ($exchanges as $exchange) {
      $countries[$exchange['country']] = $allcountries[$exchange['country']];
    }
    cache_set('ces_bank_countries', $countries, 'cache', REQUEST_TIME + 60 * 60);
  }
  return $countries;
}
/**
 * Implements hook_form_alter().
 */
function ces_bank_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'ces_user_register_form') {
    if (empty($form_state['page']) || $form_state['page'] == 'account') {
      // Next button.
      $form['actions']['next'] = array(
        '#type' => 'submit',
        '#value' => t('Next >>'),
        '#submit' => array('ces_user_register_save_values', 'ces_bank_user_register_next'),
        '#weight' => 1000,
      );
      $form['actions']['submit']['#access'] = FALSE;
    }
    elseif ($form_state['page'] == 'bankaccount') {
      $name = arg(2);
      $bank = new Bank();
      $exchange = $bank->getExchangeByName($name);
      if ($exchange !== FALSE && $bank->access('use', 'exchange accountcreator', $exchange['id'])) {
        module_load_include('inc', 'ces_bank', 'ces_bank.forms');
        $form += ces_bank_account_form($form, $form_state);
        unset($form['bankaccount']['submit']);
        $form['actions']['previous'] = array(
          '#type' => 'submit',
          '#value' => t('<< Previous'),
          '#submit' => array('ces_bank_user_register_save_values', 'ces_bank_user_register_previous'),
          '#weight' => 0,
          '#limit_validation_errors' => array(),
        );
      }
    }
    array_unshift($form['actions']['submit']['#submit'], 'ces_bank_user_register_save_values');
    $form['actions']['submit']['#submit'][] = 'ces_bank_user_register_submit';
    return $form;
  }
}
/**
 * Implements hook_form_submit().
 */
function ces_bank_user_register_previous($form, &$form_state) {
  $form_state['values'] = $form_state['page_values']['account'];
  $form_state['page'] = 'account';
  $form_state['rebuild'] = TRUE;
}
/**
 * Implements hook_form_submit().
 */
function ces_bank_user_register_next($form, &$form_state) {
  if (!empty($form_state['page_values']['bankaccount'])) {
    $form_state['values'] = $form_state['page_values']['bankaccount'];
  }
  else {
    $form_state['values'] = array();
  }

  // When form rebuilds, it will look at this to figure which page to build.
  $form_state['page'] = 'bankaccount';
  $form_state['rebuild'] = TRUE;
}
/**
 * Helper for register form submit functions.
 */
function ces_bank_user_register_save_values($form, &$form_state) {
  if ($form_state['page'] == 'bankaccount') {
    $form_state['page_values']['bankaccount'] = $form_state['values'];
  }
}
/**
 * Implements hook_form_submit().
 */
function ces_bank_user_register_submit($form, &$form_state) {
  // The user is already created. Create the banking account.
  $form_state['values'] = $form_state['page_values']['bankaccount'];
  $form_state['values']['operation'] = 'new';
  $form_state['values']['users'][0]['user'] = $form_state['user']->uid;
  module_load_include('inc', 'ces_bank', 'ces_bank.forms');
  ces_bank_account_form_submit($form, $form_state);
}
/**
 * AJAX autocomplete callback.
 * @return string
 *   Users in current exchange.
 */
function ces_bank_user_autocomplete($string) {
  $exchange = ces_bank_get_current_exchange();
  $bank = new Bank();
  $accounts = $bank->getAllAccounts(array('exchange' => $exchange['id'], 'state' => 1));
  $userids = array();
  foreach ($accounts as $account) {
    foreach ($account['users'] as $accuser) {
      $userids[$accuser['user']] = $accuser['user'];
    }
  }
  $query = db_select('users', 'u');
  $matches = array();
  $return = $query
    ->fields('u', array('name'))
    ->condition('u.name', '%' . db_like($string) . '%', 'LIKE')
    ->condition('u.uid', array_values($userids), 'IN')
    ->range(0, 10)
    ->execute();
  foreach ($return as $row) {
    $matches[$row->name] = check_plain($row->name);
  }
  // Return for JS.
  drupal_json_output($matches);
}
