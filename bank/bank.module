<?php
/**
 * @file
 * Implements the drupal hooks for this module.
 */

/**
 * Implements hook_theme().
 */
function bank_theme() {
  return array(
   /* 'exchange_list' => array(
      'template' => 'exchange-list',
      'path' => drupal_get_path('module', 'bank'),
      'variables' => array('exchanges'=>NULL),
    ),
   */
  );
}
/**
 * Implements hook_permission().
 *
 * @todo This permissions system is temporary. It must be done. This is just to
 * keep developing ahead without disturbing.
 */
/*function bank_permission() {
  return array(
    'admin ces bank' => array(
      'title' => t('Global bank administrator'),
    ),
    'view exchange' => array(
      'title' => t('View exchange'),
    ),
    'create exchange' => array(
      'title' => t('Create (inactive) exchanges'),
    ),
    'admin exchange' => array(
      'title' => t('Administer own exchange'),
    ),
    'create account' => array(
      'title' => t('Create account'),
    ),
    'edit account' => array(
      'title' => t('Edit account'),
    ),
    'view account' => array(
      'title' => t('View account'),
    ),
    'view account statement' => array(
      'title' => t('View account statement'),
    ),
    'create transaction' => array(
      'title' => t('Create transaction'),
    ),
  );
}*/

function bank_access($permission, $object, $objectid, $account = NULL) {
  global $user;
  if ($account == NULL) {
    $account = $user->uid;
  }
  $bank = new Bank();
  return $bank->access($permission, $object, $objectid, $account);
}

/**
 * Implements hook_menu().
 */
function bank_menu() {
  global $user;
  $menu = array();
  $menu['ces/bank/admin'] = array(
    'title' => 'Administer CES bank',
    'description' => 'Top administer interface for CES Bank',
    'page callback' => 'bank_admin_page',
    'file' => 'bank.pages.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'access callback' => 'bank_access',
    'access arguments' => array('admin', 'global', 0),
  );

  $menu['ces/bank/exchange/list'] = array(
    'title' => 'List exchanges',
    'description' => 'List of active exchanges',
    'page callback' => 'bank_exchange_list_page',
    'file' => 'bank.pages.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'access callback' => 'bank_access',
    'access arguments' => array('view', 'global statistics', 0),
  );

  $menu['ces/bank/exchange/new'] = array(
    'title' => 'New exchange',
    'description' => 'Create a new exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_exchange_form', 3),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'access callback' => 'bank_access',
    'access arguments' => array('use', 'global exchangecreator', 0),
  );
//TODO: change exchange/view to another page!
  $menu['ces/bank/exchange/view'] = array(
    'title' => 'View exchange',
    'description' => 'View exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_exchange_form', 3, 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('view', 'exchange details', 4),
  );

  $menu['ces/bank/exchange/edit'] = array(
    'title' => 'Edit exchange',
    'description' => 'Edit exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_exchange_form', 3, 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('admin', 'exchange', 4),
  );

  $menu['ces/bank/exchange/activate'] = array(
    'title' => 'Activate exchange',
    'description' => 'Activate exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_exchange_form', 3, 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('admin', 'global', 0),
  );

  $menu['ces/bank/account/new'] = array(
    'title' => 'New account',
    'description' => 'Create a new banking account.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_account_form', 3, 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('use', 'exchange accountcreator', 4),
  );

  $menu['ces/bank/account/edit'] = array(
    'title' => 'Edit account',
    'description' => 'Edit a banking account.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_account_form', 3, 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('edit', 'account', 4),
  );

  $menu['ces/bank/account/view'] = array(
    'title' => 'View account',
    'description' => 'View banking account properties.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_account_form', 3, 4),
    'access arguments' => array('view account'),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('view', 'account details', 4),
  );

  $menu['ces/bank/account/list'] = array(
    'title' => 'List accounts' ,
    'description' => 'List and info of user banking accounts',
    'page callback' => 'bank_account_list_page',
    'file' => 'bank.pages.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'access callback' => TRUE,
  );

  $menu['ces/bank/account/statement'] = array(
    'title' => 'Account statement' ,
    'description' => 'Last transactions with this account.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_account_statement_form', 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('view', 'account transactions', 4),
  );

  $menu['ces/bank/limitchain/new'] = array(
    'title' => 'New limit chain',
    'description' => 'Create a new limit chain.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_limitchain_form', 3, 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('admin', 'exchange', 4),  
  );

  $menu['ces/bank/limitchain/edit'] = array(
    'title' => 'Edit limit chain',
    'description' => 'Edit a limit chain.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_limitchain_form', 3, 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('admin', 'exchange', 4),  
  );

  $menu['ces/bank/transaction/new'] = array(
    'title' => 'Enter single transaction',
    'description' => 'Enter single transaction from your account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_transaction_form', 4, 5),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('use', 'account seller', 4),  
  );
  $menu['ces/bank/permission'] = array(
    'title' => 'Permissions',
    'description' => 'Adminiser permissions',
    'page callback' => 'bank_permissions_page',
    'file' => 'bank.pages.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  
  $menu['ces/bank/permission/list'] = array(
    'title' => 'List',
    'description' => 'Adminiser permissions',
    'page callback' => 'bank_permissions_page',
    'file' => 'bank.pages.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'access callback' => TRUE,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $menu['ces/bank/permission/new'] = array(
    'title' => 'Add',
    'description' => 'Add new permission',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_permission_form', 3),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
  );
  
  $menu['ces/bank/permission/edit/%'] = array(
    'title' => 'Edit permission',
    'description' => 'Edit permission',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_permission_form', 3, 4),
    'file' => 'bank.forms.inc',
    'file path' => drupal_get_path('module', 'bank'),
    'type' => MENU_CALLBACK,
    'access callback' => 'bank_access',
    'access arguments' => array('edit', 'permission', 4),
  );
  

  return $menu;
}

/**
 * Implements hook_account_limit_classes().
 */
function bank_account_limit_classes() {
  return array('AbsoluteCreditLimit', 'AbsoluteDebitLimit');
}

/**
 * Implements hook_decorated_transaction_classes().
 */
function bank_decorated_transaction_classes() {
  return array('InterExchangeTransaction', 'LevyedTransaction');
}

/**
 * Implements hook_token_info().
 */
function bank_token_info() {
  return array(
    'types' => array(
      'exchange' => array(
        'name' => t('Exchange'),
        'description' => t('Tokens for bank exchanges.'),
      ),
      'account' => array(
        'name'  => t('Account'),
        'description' => t('Tokens for bank accounts.')
      ),
      'transaction' => array(
        'name' => t('Transaction'),
        'description' => t('Tokens for bank transactions.')
      )
    ),
    'tokens' => array(
      'exchange' => array(
        'code' => array(
          'name'   => t('Exchange code'),
          'description' => t('The 4 letter exchange code.'),
        ),
        'shortname' => array(
          'name' => t('Exchange short name'),
          'description' => t('Exchange short name.'),
        ),
        'name' => array(
          'name' => t('Exchange full name'),
          'description' => t('Exchange full name.'),
        ),
        'country' => array(
          'name' => t('Exchange country'),
          'description' => t('Exchange country.'),
        ),
        'town' => array(
          'name' => t('Exchange town'),
          'description' => t('Exchange town.'),
        ),
        'region' => array(
          'name'   => t('Exchange region'),
          'description' => t('Exchange region within the country.'),
        ),
        'website' => array(
          'name' => t('Exchange website'),
          'description' => t('Exchange website.'),
        ),
        'currencysymbol' => array(
          'name' => t('Currency symbol'),
          'description' => t('Exchange currency symbol.'),
        ),
        'currencyname' => array(
          'name'   => t('Currency name'),
          'description' => t('Exchange currency name.'),
        ),
        'currenciesname' => array(
          'name'   => t('Currency name plural'),
          'description' => t('Exchange currency name in plural.'),
        ),
        'currencyvalue' => array(
          'name'   => t('Currency value'),
          'description' => t('Exchange currency value in hours of work.'),
        ),
        'admin' => array(
          'name'   => t('Exchange administrator'),
          'description' => t('Exchange administrator user.'),
          'type' => 'user',
        )
      ),
      'account' => array(
        'name' => array(
          'name' => t('Account identifier'),
          'description' => t('4 letter exchange identifier plus 4 number account code.'),
        ),
        'kind' => array(
          'name' => t('Type'),
          'description' => t('Account type.'),
        ),
        'user' => array(
          'name' => t('Account user'),
          'description' => t('Account user.'),
          'type' => 'user',
        )
      ),
      'transaction' => array(
        'fromaccount' => array(
          'name' => t('Buyer account'),
          'description' => t('The buyer account object.'),
          'type' => 'account',
        ),
        'toaccount' => array(
          'name' => t('Seller account'),
          'description' => t('The seller account object.'),
          'type' => 'account',
        ),
        'amount' => array(
          'name' => t('Amount'),
          'description' => t('The transaction amount.'),
        ),
        'concept' => array(
          'name' => t('Description'),
          'description' => t('The concept of the transaction.')
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function bank_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'exchange' && !empty($data['exchange'])) {
    $exchange = $data['exchange'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'code':
          $replacements[$original] = $sanitize?check_plain($exchange['code']):$exchange['code'];
          break;
        case 'shortname':
          $replacements[$original] = $sanitize?check_plain($exchange['shortname']):$exchange['shortname'];
          break;
        case 'name':
          $replacements[$original] = $sanitize?check_plain($exchange['name']):$exchange['name'];
          break;
        case 'country':
          $replacements[$original] = $sanitize?check_plain($exchange['country']):$exchange['country'];
          break;
        case 'town':
          $replacements[$original] = $sanitize?check_plain($exchange['town']):$exchange['town'];
          break;
        case 'region':
          $replacements[$original] = $sanitize?check_plain($exchange['region']):$exchange['region'];
          break;
        case 'website':
          $replacements[$original] = $sanitize?check_plain($exchange['website']):$exchange['website'];
          break;
        case 'currencysymbol':
          $replacements[$original] = $sanitize?check_plain($exchange['currencysymbol']):$exchange['currencysymbol'];
          break;
        case 'currencyname':
          $replacements[$original] = $sanitize?check_plain($exchange['currencyname']):$exchange['currencyname'];
          break;
        case 'currenciesname':
          $replacements[$original] = $sanitize?check_plain($exchange['currenciesname']):$exchange['currenciesname'];
          break;
        case 'currencyvalue':
          $replacements[$original] = $sanitize?check_plain($exchange['currencyvalue']):$exchange['currencyvalue'];
          break;
      }
    }
    if ($admin_tokens = token_find_with_prefix($tokens, 'admin')) {
      $replacements += token_generate('user', $admin_tokens, array('user' => user_load($exchange['admin'])), $options);
    }
  }
  if ($type == 'account' && !empty($data['account'])) {
    $account = $data['account'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'name':
          $replacements[$original] = $sanitize?check_plain($account['name']):$account['name'];
          break;
        case 'kind':
          $replacements[$original] = $sanitize?check_plain($account['kind']):$account['kind'];
          break;
      }
    }
    if ($user_tokens = token_find_with_prefix($tokens, 'user')) {
      $accountUser = reset($account['users']);
      $uid = $accountUser['user'];
      $replacements += token_generate('user', $user_tokens, array('user' => user_load($uid)), $options);
    }
  }
  if ($type == 'transaction' && !empty($data['transaction'])) {
    $transaction = $data['transaction'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'amount':
          $replacements[$original] = $sanitize?check_plain($transaction['amount']):$transaction['amount'];
          break;
        case 'concept':
          $replacements[$original] = $sanitize?check_plain($transaction['concept']):$transaction['concept'];
          break;
      }
      if ($fromaccount_tokens = token_find_with_prefix($tokens, 'fromaccount')) {
        $bank = new Bank();
        $replacements += token_generate('account', $fromaccount_tokens, array('account' => $bank->getAccountByName($transaction['fromaccount'])), $options);
      }
      if ($toaccount_tokens = token_find_with_prefix($tokens, 'toaccount')) {
        $bank = new Bank();
        $replacements += token_generate('account', $toaccount_tokens, array('account' => $bank->getAccountByName($transaction['toaccount'])), $options);
      }
    }
  }
  return $replacements;
}
/**
 * Implements ces_motify_messages().
 */
function bank_ces_notify_messages($key, $langcode) {
  $a = array();
  $b = array('langcode' => $langcode);
  switch ($key) {
    case 'new exchange':
      return array(
        'subject' => t('New Exchange [exchange:code] - [exchange:shortname] request', $a, $b),
        'body' => t('A new exchange has been registered.

Visit the CES administrative interface at [url:absolute]/admin/ces to activate or discard it. See some details below:

Code: [exchange:code]
Short name: [exchange:shortname]
Full name: [exchange:name]
Country: [exchange:country]
Location: [exchange:town] ([exchange:region])
Web site: [exchange:website]
Currency: [exchange:currencysymbol] ( [exchange:currencyname] ), value [exchange:currencyvalue]
User: [exchange:admin:name] <[exchange:admin:mail]>

', $a, $b)
      );
    case 'new account':
      return array(
        'subject' => t('New account request for [exchange:code] - [exchange:shortname]', $a, $b),
        'body' => t('Another account request for [exchange:name]. Go to the administrative interface at [url:absolute]/ces/bank/exchange/admin to activate or discard it.

See registration details below:

Exchange: [exchange:code]
Account name: [account:name]
Account type: [account:kind]
User: [account:user:name]', $a, $b)
      );
    case 'account debited':
      return array(
        'subject' => t('Your account has been debited'),
        'body' => t(
'[transaction:fromaccount:exchange:name]: Your account [transaction:fromaccount:name] has been debited.

See transaction details below:

Seller account: [transaction:toaccount:name]
Seller name: [transaction:toaccount:user:name] <[transaction:toaccount:user:mail]>
Description: [transaction:concept]
Amount: [transaction:amount][transaction:fromaccount:exchange:currencysymbol]
Ordered by: [transaction:user:name] <[transaction:user:mail]>

If you were satisfied with this purchase please <a href="">leave a recommendation</a> for the seller.

View your current <a href="">statement of account</a>.

If this debit is incorrect contact the seller within 10 days to have it corrected.

', $a, $b),
      );
    case 'account credited':
      return array(
        'subject' => t('Your account [transaction:toaccount:name] has been credited'),
        'body' => t('[transaction:toaccount:exchange:name]:Your account [transaction:toaccount:name] has been credited.

See transaction details below:

Buyer account: [transaction:fromaccount:name]
Buyer name: [transaction:fromaccount:user:name] <[transaction:fromaccount:user:mail]>
Description: [transaction:concept]
Amount: [transaction:amount][transaction:toaccount:exchange:currencysymbol]
Ordered by: [transaction:user:name] <[transaction:user:mail]>

', $a, $b),
      );
  }
  return FALSE;
}