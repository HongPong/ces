<?php
/**
 * @file
 * Test ces_interop module.
 */



class CesInteropTestCase extends CesBankTestCase {
  /**
   * OAuth2 test client key.
   */
  var $client_key = 'test';
  /**
   * OAuth2 test client secret.
   */
  var $client_secret = 'test_secret';
  /**
   * Oauth2 test client redirect URI.
   */
  var $client_uri;
  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp();
    $this->client_uri = url('ces/interop/test', array('absolute' => TRUE));
    // Create oauth2 client for ICES interop.
    $client = entity_create('oauth2_server_client', array());
    $client->server = 'interop';
    $client->label = 'Test client';
    $client->client_key = $this->client_key;
    $client->client_secret = $this->client_secret;
    $client->redirect_uri = $this->client_uri;
    $client->automatic_authorization = FALSE;
    $client->save();
    
    // Grant the anonymous users the permission to use oauth2.
    $anon_role = user_role_load_by_name('anonymous user');
    user_role_grant_permissions($anon_role->rid, array('use oauth2 server'));
    $auth_role = user_role_load_by_name('authenticated user');
    user_role_grant_permissions($auth_role->rid, array('use oauth2 server'));
  }
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'ces_interop',
      'description' => 'Test ICES Interop main features.',
      'group' => 'ICES',
    );
  }
  /**
   * Overrides parent method to ad his module.
   */
  protected function getNeededModules() {
    $modules = parent::getNeededModules();
    $modules[] = 'ces_interop';
    return $modules;
  }
  
  /**
   * This function performs all tests.
   *
   * Since we have to perform heavy operations (create and activate exchanges,
   * accounts, etc) before we can actually test critical features we join all in
   * one test function to save resources.
   */
  protected function testAll() {
    $this->createExchanges();
    $this->createAccounts();
    // Now we are ready to test opentransact.
    $this->doOpentransact();
  }
  /**
   * Test opentransact features.
   * 
   * One can use this function as an example on how to use opentransact
   * protocol, and specifically the ICES interop implementation of it.
   */
  protected function doOpenTransact() {
    // Initialize the flow with anonymous user.
    $this->drupalLogout();
    // 1. Authorization code request for opentransact transaction.
    $query = array(
      // OAuth2 parameters.
      'response_type' => 'code',
      'client_id' => $this->client_key,
      'state' => drupal_get_token($this->client_key),
      // The "authorized" url doesn't actually exist, but we don't need it.
      'redirect_uri' => $this->client_uri,
      // OpenTransact parameters.
      'from' => 'HORA0001',
      'to' => 'HORA0002',
      'amount' => '1.5',
      'note' => 'OpenTransact test transaction.',
      'validity' => 'PH10', //10 hours
    );
    $this->drupalGet('ces/interop/opentransact/' . $this->exchange1['code'],
      array('absolute' => TRUE, 'query' => $query));
    // This call should redirect us to user/login.
    $user1 = $this->accountUser($this->account11);
    $edit = array(
      'name' => $user1->name,
      'pass' => $user1->pass_raw,
    );
    $this->drupalPost(NULL, $edit, t('Log in'));
    // Now we are redirected to the confirmation form.
    $this->assertText('OpenTransact test transaction.');
    $this->drupalPost(NULL, NULL, t('Yes, I authorize this request.'));
    // Get the first redirect URL from the returned headers.
    $headers = $this->drupalGetHeaders(TRUE);
    $first_headers = reset($headers);
    $redirect_url = $first_headers['location'];
    $redirect_url_parts = explode('?', $redirect_url);
    $redirect_url_params = drupal_get_query_array($redirect_url_parts[1]);
    // And get the authorization code from that redirection. A real application
    // should get the authorization code from the redirected URL handler.
    $authorization_code = $redirect_url_params['code'];
 
    // 2. Exchange authorization code by access token.
    $this->drupalLogout();
    $token_url = url('ces/interop/opentransact/token', array('absolute' => TRUE));
    $data = array(
      'grant_type' => 'authorization_code',
      'code' => $authorization_code,
      'redirect_uri' => $this->client_uri,
    );
    $options = array(
      'method' => 'POST',
      'data' => http_build_query($data),
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
        'Authorization' => 'Basic ' . base64_encode($this->client_key . ':' . $this->client_secret),
      ),
    );
    $result = $this->httpRequest($token_url, $options);
    $response = json_decode($result->data);
    $access_token = $response->access_token;

    // 3. Use the Bearer access token to perform the transaction.
    $resource_url = url('ces/interop/opentransact/' . $this->exchange1['code'],
      array('absolute' => TRUE));
    $options = array(
      'headers' => array(
        'Authorization' => 'Bearer ' . $access_token,
      ),
    );
    $result = $this->httpRequest($resource_url, $options);
    $response = json_decode($result->data);
    // That's all! Not so difficult, huh?

    // Check that there isn't errors.
    if (isset($response->error)) {
      $this->assert(FALSE, $response->error_description);
    }
    else {
      // Or assert some fields of opentransact receipt.
      $this->assertEqual($response->from, 'HORA0001');
      $this->assertEqual($response->to, 'HORA0002');
      $this->assertEqual($response->amount, '1.5');
    }
    // Be sure that the transaction has been applied.
    $user1 = $this->accountUser($this->account11);
    $this->assertBalance($user1, '-1.50');
    $user2 = $this->accountUser($this->account12);
    $this->assertBalance($user2, '1.50');
  }
  /**
   * Calls drupal_http_request disabling redirects.
   */
  protected function httpRequest($url, $options = array()) {
    $options += array('max_redirects' => 0);
    return drupal_http_request($url, $options);
  }
}
