<?php
/**
 * @file
 * Drupal hooks for the ICES interoperability services module.
 */

/**
 * Name of the opentransact OAuth2 server.
 */
define('CES_INTEROP_OAUTH2_SERVER_NAME', 'interop');
define('CES_INTEROP_OAUTH2_OPENTRANSACT_SCOPE_NAME', 'opentransact');

/**
 * Implements hook_menu().
 *
 * Defines the endpoint fo opentransact operations.
 */
function ces_interop_menu() {
  $items = array();
  $items['ces/interop/opentransact/%'] = array(
    'page callback' => 'ces_interop_opentransact',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Opentrasact url callback.
 *
 * This is the entry point for all opetransact-related operations.
 */
function ces_interop_opentransact($exchange_name) {
  // Verify url.
  if ($exchange_name == 'token') {
    // This is a code to token exchange call. Save the authorization code to be
    // able later to link the created token with the transaction.
    global $_ces_interop_authorization_code;
    $_ces_interop_authorization_code = $_POST['code'];
    // Delegate the authorization to the oauth2_server module.
    require_once drupal_get_path('module', 'oauth2_server') . '/oauth2_server.pages.inc';
    return oauth2_server_token();
  }

  $exchange = ces_bank_get_exchange_by_name($exchange_name);
  if (!$exchange) {
    // Exchange do not exist. Abort.
    return MENU_NOT_FOUND;
  }
  // Decide if the request is Transfer Authorization or Transfer.
  // It is a Transfer if we found the Authorization: Bearer X header, and an
  // authorization request otherwise.
  $request = OAuth2\Request::createFromGlobals();
  $auth = $request->headers('AUTHORIZATION');
  if (!empty($auth) && preg_match('/Bearer\s(\S+)/', $auth)) {
    // Transfer.
    // Delegate authentication to oauth2_server module. The execution will abort
    // on failure.
    $token = oauth2_server_verify_access(CES_INTEROP_OAUTH2_SERVER_NAME);
    if (!$token['user_id']) {
      ces_interop_send_authorize_error('access_denied', 'User unknown for this token.');
    }
    global $user;
    $user = user_load_by_name($token['user_id']);
    return ces_interop_apply_transaction($token['access_token']);
  }
  else {
    // Transfer Authorization.
    require_once drupal_get_path('module', 'oauth2_server') . '/oauth2_server.pages.inc';
    return oauth2_server_authorize();
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter the oauth2_server authorization form adding the transaction-related
 * information. It also validates the transaction data.
 */
function ces_interop_form_oauth2_server_authorize_form_alter(&$form, &$form_state) {
  $arguments = $form_state['build_info']['args'];
  $server = $arguments[1];
  if ($server->name == CES_INTEROP_OAUTH2_SERVER_NAME) {
    global $user;
    // Remove the standard text.
    unset($form['scopes']);
    $form['authorize']['#weight'] = 100;
    // Setup a new text.
    $form['ces_interop'] = array(
      '#prefix' => '<div class="ces_interop_description">',
      '#suffix' => '</div>',
    );
    $form['ces_interop']['question'] = array(
      '#markup' => '<h3>' . t('Do you authorize the following transaction?') . '</h3>',
    );
    // Get parameters from query string.
    $parameters = _ces_interop_get_query_parameters();
    $bank = new Bank();
    if (isset($parameters['from'])) {
      $name = $parameters['from'];
      $fromaccount = $bank->getAccountByName($name);
    }
    else {
      $fromaccount = array_shift($bank->getUserAccounts($user->uid));
    }
    if (empty($fromaccount)) {
      // Error: account not found.
      return ces_interop_send_authorize_error('invalid_from', 'Invalid buyer account.');
    }
    $fromuser = reset($fromaccount['users']);
    $fromusername = ces_user_get_name(user_load($fromuser['user']));
    $form['ces_interop']['from'] = array(
      '#type' => 'item',
      '#title' => t('Buyer account'),
      '#markup' => check_plain($fromaccount['name'] . ' - ' . $fromusername),
    );
    if (isset($parameters['to'])) {
      $toaccount = $bank->getAccountByName($parameters['to']);
    }
    if (empty($toaccount)) {
      return ces_interop_send_authorize_error('invalid_to', 'Invalid seller account.');
    }
    $touser = reset($toaccount['users']);
    $tousername = ces_user_get_name(user_load($touser['user']));
    $form['ces_interop']['to'] = array(
      '#type' => 'item',
      '#title' => t('Seller account'),
      '#markup' => check_plain($toaccount['name'] . ' - ' . $tousername),
    );
    if (!isset($parameters['amount']) || !is_numeric($parameters['amount'])) {
      return ces_interop_send_authorize_error('invalid_amount', 'Invalid amount.');
    }
    $exchange = $bank->getExchange($toaccount['exchange']);
    $form['ces_interop']['amount'] = array(
      '#type' => 'item',
      '#title' => t('Amount'),
      '#markup' => check_plain($bank->formatAmount($parameters['amount'], $exchange, TRUE)),
    );
    $note = isset($parameters['note']) ? $parameters['note'] : t('No details provided.');
    $form['ces_interop']['note'] = array(
      '#type' => 'item',
      '#title' => t('Description'),
      '#markup' => check_plain($note),
    );
    $transaction = array(
      'fromaccount' => $fromaccount['id'],
      'toaccount' => $toaccount['id'],
      'amount' => $parameters['amount'],
      'concept' => $note,
    );
    // Check whether the logged in user has access to create the transaction.
    if (!ces_transaction_access('use', $transaction)) {
      return ces_interop_send_authorize_error('access_denied', 'The user is not authorized to create this transaction.');
    }
    // Save transaction data into a form value.
    $form['ces_interop']['transaction'] = array(
      '#type' => 'value',
      '#value' => $transaction,
    );
    array_unshift($form['#submit'], 'ces_interop_oauth2_server_authorize_form_submit');
  }
}
/**
 * Additional submit function for oauth2_server_authorize_form.
 */
function ces_interop_oauth2_server_authorize_form_submit($form, &$form_state) {
  // Since this is an opentransact authorised authorisation request, it will
  // trigger the creation of an authorisation code. We will handle then our
  // main logic, but now we keep the data into global variable to be used later.
  global $_ces_interop_transaction;
  $_ces_interop_transaction = $form_state['values']['transaction'];
}
/**
 * Implements hook_entity_presave().
 *
 * For authorization_code entities, it creates the associated transaction and
 * fills the field in entity with the transaction id.
 * For token entities, it moves the transaction id field value from the
 * authorization code to the token.
 */
function ces_interop_entity_presave($entity, $type) {
  global $_ces_interop_transaction;
  global $_ces_interop_authorization_code;

  switch ($type) {
    case 'oauth2_server_authorization_code':
      // Get transaction from form submit function.
      if (!empty($_ces_interop_transaction)) {
        // Create transaction.
        $bank = new Bank();
        $bank->createTransaction($_ces_interop_transaction);
        // Link transaction to authorisation code.
        $entity->ces_interop_transaction = array();
        $entity->ces_interop_transaction[LANGUAGE_NONE][0]['value'] = $_ces_interop_transaction['id'];
        // No longer needed.
        unset($_ces_interop_transaction);
      }
      break;

    case 'oauth2_server_token':
      // Get code from page callback.
      if (!empty($_ces_interop_authorization_code)) {
        // Save transaction id from authorization code to access token.
        $code = oauth2_server_authorization_code_load($_ces_interop_authorization_code);
        $transaction_id = $code->ces_interop_transaction[LANGUAGE_NONE][0]['value'];
        $entity->ces_interop_transaction[LANGUAGE_NONE][0]['value'] = $transaction_id;
        // No longer needed.
        unset($_ces_interop_authorization_code);
      }
      break;

  }
}
/**
 * Apply an authorized transaction from the access token.
 *
 * @param string $access_token
 *   The access token string.
 */
function ces_interop_apply_transaction($access_token) {
  $token = oauth2_server_token_load($access_token);
  if (empty($token->ces_interop_transaction[LANGUAGE_NONE][0]['value'])) {
    ces_interop_send_authorize_error('access_denied', 'No transaction associated with this access token');
  }
  $transaction_id = $token->ces_interop_transaction[LANGUAGE_NONE][0]['value'];
  $bank = new Bank();
  try{
    $res = $bank->applyTransaction($transaction_id);
  }
  catch (Exception $e) {
    ces_interop_send_json('500 Internal Server Error', $e->getMessage());
  }
  // Expire access token.
  $token->delete();

  if ($res === TRUE) {
    // Build opentransact receipt.
    $transaction = $bank->getTransaction($transaction_id);
    $toaccount = $bank->getAccount($transaction['toaccount']);
    $fromaccount = $bank->getAccount($transaction['fromaccount']);
    $exchange = $bank->getExchange($toaccount['exchange']);
    global $base_url;
    $receipt = array(
      'txn_url' => $base_url . '/ces/bank/account/transaction/' . $transaction_id . '/view',
      'to' => $toaccount['name'],
      'from' => $fromaccount['name'],
      'amount' => $transaction['amount'],
      'note' => $transaction['concept'],
      'asset_url' => $base_url . '/ces/interop/opentransact' . $exchange['code'],
      'timestamp' => REQUEST_TIME,
    );
    ces_interop_send_json('201 Created', $receipt);
  }
  else {
    $message = implode("\n", $res);
    ces_interop_send_authorize_error('access_denied', $message);
  }
}
/**
 * Send error and abort execution.
 *
 * Send JSON OAuth2-like errors for invalid opentransact parameters.
 *
 * @param string $error
 *   The error code.
 * @param string $description
 *   Description of the error.
 */
function ces_interop_send_authorize_error($error, $description) {
  $object = array(
    'error' => $error,
    'error_description' => $description,
  );
  ces_interop_send_json('400 Bad Request', $object);
}
/**
 * Send JSON response to the client.
 *
 * The execution will end in this function.
 *
 * @param string $status
 *   The HTTP status string.
 * @param object $object
 *   The object to be encoded in JSON fomat.
 */
function ces_interop_send_json($status, $object) {
  drupal_add_http_header('Status', $status);
  drupal_add_http_header('Content-Type', 'application/json');
  drupal_add_http_header('Cache-Control', 'no-store');
  $content = drupal_json_encode($object);
  drupal_add_http_header('Content-Length', strlen($content));
  echo $content;
  drupal_exit();
}
/**
 * Get Opentransact parameters.
 */
function _ces_interop_get_query_parameters() {
  if (isset($_SESSION['oauth2_server_authorize'])) {
    $parameters = $_SESSION['oauth2_server_authorize'];
  }
  else {
    $parameters = drupal_get_query_parameters();
  }
  return $parameters;
}
