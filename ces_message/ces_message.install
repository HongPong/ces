<?php
/**
 * @file
 * Install for a ces message - need to create the base table for our entity.
 * and create the template templates
 */

/**
 * Implements hook_schema().
 *
 * @ingroup ces_message
 */
function ces_message_schema() {
  $schema = array();
  $schema['ces_message'] = array(
    'description' => 'Message from CES.',
    'fields' => array(
      'mid' => array(
        'description' => 'Unique message id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'type_message' => array(
        'description' => 'Type of message, example account_activated',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'user' => array(
        'description' => 'UID of the owner user',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'exchange' => array(
        'description' => 'ID of exchange',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'subject' => array(
        'description' => 'Message subject',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'body' => array(
        'description' => 'Message body',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'state' => array(
        'description' => 'The state of the message. 0 = unread, 1 = read',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('mid'),
    'foreign keys' => array(
      'user' => array(
        'table' => 'user',
        'columns' => array('user' => 'uid'),
      ),
      'exchange' => array(
        'table' => 'ces_exchange',
        'columns' => array('exchange' => 'id'),
      ),
    ),
  );

  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['ces_message_template'] = array(
    'description' => 'The base table for our ces message.',
    'fields' => array(
      'template_id' => array(
        'description' => 'Primary key of the ces message.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ),
      'exchange_id' => array(
        'description' => 'Id of exchange',
        'type' => 'int',
        'unsigned' => TRUE,
        'notnull' => TRUE,
        'default' => 0,
      ),
      'ces_action_id' => array(
        'description' => 'The id of ces action',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'subject' => array(
        'description' => 'A subject of the message',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'template' => '',
        'translatable' => TRUE,
      ),
      'body' => array(
        'description' => 'A body of the message',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'template' => '',
        'translatable' => TRUE,
      ),
      'language' => array(
        'description' => 'The {languages}.language of this message.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the entity creation time.',
        'type' => 'int',
        'not null' => TRUE,
        'template' => 0,
      ),
    ),
    'primary key' => array('template_id'),
    'unique keys' => array(
      'exchange_action_lang' => array('exchange_id','ces_action_id','language'),
    ),
    'foreign keys' => array(
      'exchange_id' => array(
        'table' => 'ces_exchange',
        'columns' => array('exchange_id', 'id'),
      ),
      'ces_action_id' => array(
        'table' => 'ces_action',
        'columns' => array('ces_action_id', 'id'),
      ),
    ),
  );

  $schema['ces_action'] = array(
    'description' => 'Table for ces actions.',
    'fields' => array(
      'id' => array(
        'description' => 'ID of action',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name for the action',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Detailed description of this category',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}
/**
 * Implements hook_install().
 *
 * Concept definitions and body templates are saved in separate files for easy 
 * management. Example:
 *
 * - includes/actions/en/new_exchange.inc
 * - includes/actions/en/account_activated.inc
 * - includes/actions/ca/new_exchange.inc
 */
function ces_message_install() {

  // Create ces actions.
  $action = (object) array(
    'name' => 'new_exchange',
    'description' => 'New exchange',
  );
  ces_message_action_save($action);
  $action = (object) array(
    'name' => 'exchange_activated',
    'description' => 'Exchange activated',
  );
  ces_message_action_save($action);
  $action = (object) array(
    'name' => 'new_account',
    'description' => 'New account',
  );
  ces_message_action_save($action);
  $action = (object) array(
    'name' => 'account_activated',
    'description' => 'Account Activated',
  );
  ces_message_action_save($action);
  $action = (object) array(
    'name' => 'account_debited',
    'description' => 'Account Debited',
  );
  ces_message_action_save($action);
  $action = (object) array(
    'name' => 'account_credited',
    'description' => 'Account Credited',
  );
  ces_message_action_save($action);

  foreach (glob(dirname(__FILE__) . '/includes/actions/*') as $lang) {
    $language = basename($lang);
    foreach (glob($lang . '/*.inc') as $template) {
      $action = basename($template, '.inc');
      $actions = ces_message_action_load_multiple(FALSE, array('name' => $action), TRUE);
      if (!$actions) {
        trigger_error('Error, Does not exist action [' . $action . ']', E_USER_ERROR);
      }
      foreach ($actions as $action_object) {
        $action_id = $action_object->id;
      }
      include $template;
      $template = (object) array(
        'subject' => $subject,
        'body' => $body,
        'exchange_id' => 0,
        'ces_action_id' => $action_id,
        'language' => $language,
        'bundle_type' => 'ces_message_bundle',
      );
      ces_message_template_save($template);

    }
  }
}


/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 *
 * @ingroup ces_message
 */
function ces_message_uninstall() {
  field_attach_delete_bundle('ces_message_template', 'ces_message_bundle');
  field_attach_delete_bundle('ces_message', 'default');
}
